{"version":3,"sources":["CompNavio.js","Datos.js","App.js","serviceWorker.js","index.js"],"names":["Navio","props","this","usarNavio","console","log","datos","nv","navio","elDiv","datosActuales","data","addAllAttribs","ref","Component","Datos","state","tieneUrl","loading","consultas","traerInfo","bind","hacerPedido","consultaPasada","fetch","mode","then","response","json","setState","renderConsultas","map","t","text","urlBuscar","linkInput","value","contenido","actual","urlActual","length","nuevos","concat","guardarConsulta","method","body","JSON","stringify","headers","Accept","window","location","reload","type","onInput","onChange","onClick","CompNavio","className","App","amount","tamano","i","push","for","id","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f1a0de2.chunk.js","sourcesContent":["import React, {Component} from\"react\";\r\nimport navio from \"navio\";\r\n\r\nclass Navio extends Component{\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props);\r\n\t\t\t\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tthis.usarNavio();\r\n\t}\r\n\r\n\tcomponentDidUpdate(){\r\n\t\tthis.usarNavio();\r\n\t}\r\n\r\n\tusarNavio()\r\n\t{\r\n\t\tconsole.log(\"Datos que llegan a Navio\", this.props.datos)\r\n\t\tconst nv = new navio (this.elDiv, 600);\r\n\t\tlet datosActuales = this.props.datos;\r\n\t\tnv.data(datosActuales);\r\n\t\tnv.addAllAttribs();\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div ref = {elDiv => this.elDiv = elDiv}></div>\r\n\t\t\t)\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Navio;","\r\nimport React, {Component} from \"react\";\r\nimport CompNavio from \"./CompNavio.js\";\r\nimport { MDBListGroup, MDBListGroupItem, MDBContainer } from \"mdbreact\";\r\n\r\nclass Datos extends Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      \"urlBuscar\": \"\",\r\n      \"datos\": [],\r\n      tieneUrl: false,\r\n      loading: false,\r\n      consultas: []\r\n    }\r\n    this.traerInfo = this.traerInfo.bind(this);\r\n    this.hacerPedido = this.hacerPedido.bind(this);\r\n    this.consultaPasada = this.consultaPasada.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(\"/busquedas\",{mode:'no-cors'})\r\n    .then(response => response.json())\r\n    .then(response => {console.log(\"Respose\", response);\r\n      this.setState({\r\n      consultas:response\r\n    })});\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.renderConsultas();\r\n  }\r\n\r\n\r\n  renderConsultas(){\r\n    return this.state.consultas.map(t=>  \r\n        <div>\r\n          {t.text}\r\n        </div>\r\n    )\r\n  }\r\n\r\n  onChange( ){ \r\n      this.setState({urlBuscar:this.linkInput.value});\r\n  }\r\n\r\n  consultaPasada(contenido){\r\n    this.linkInput.value = contenido;\r\n  }\r\n  \r\n  hacerPedido(actual) { \r\n      let urlActual = this.state.urlBuscar + \"?$limit=900&$offset=\"+actual;\r\n      fetch(urlActual)\r\n      .then(response => response.json())\r\n      .then(response => {\r\n        console.log(\"Datos\", response);\r\n        \r\n        if(response.length == 0)\r\n        {\r\n          this.setState({tieneUrl: true, loading:false});\r\n        }\r\n        else\r\n        {\r\n          let datos = response;\r\n          let viejos = this.state.datos;\r\n          let nuevos = viejos.concat(datos);\r\n          this.setState({datos:nuevos});\r\n          console.log(\"Datos en datos\", this.state.datos);\r\n          actual = actual + 900;\r\n          this.hacerPedido(actual);\r\n        }\r\n      });\r\n    }\r\n\r\n  traerInfo(){\r\n    let actual = 0;\r\n    this.guardarConsulta(this.linkInput.value);   \r\n    this.setState({loading: true})\r\n    console.log(\"Antes del while\");\r\n    this.hacerPedido(actual);\r\n  }\r\n\r\n  async guardarConsulta(contenido){\r\n    let text = contenido;\r\n    console.log(\"contenido\", text);\r\n    let resultado = await fetch(\"/crearConsulta\", {\r\n      method:\"POST\",\r\n      body: JSON.stringify({text}), \r\n      headers: {\r\n        Accept:\"application/json\",\r\n        \"Content-Type\":\"application/json\"\r\n      }\r\n    });\r\n  }\r\n\r\n  refresh() {\r\n    window.location.reload(true);\r\n  }\r\n\r\n  render () {\r\n    return(\r\n      <div> \r\n        <div> \r\n          <input type=\"text\" ref ={linkInput => this.linkInput = linkInput} onInput = {this.onChange.bind(this)}></input>\r\n          <button type=\"button\" onClick={this.traerInfo}>Traer datos </button>\r\n          <br/>\r\n          <br/>\r\n          <br/>\r\n          {this.state.loading == true? <h3> Espere un momento, estamos cargando la informacion </h3>:<br></br>}\r\n          {this.state.tieneUrl == true ? <CompNavio datos={this.state.datos}></CompNavio> : <br></br>}\r\n        </div>  \r\n        <div>\r\n            <div className=\"d-flex w-500 justify-content-between\">\r\n              <h3> Consultas pasadas </h3>\r\n            </div>\r\n          <div>\r\n            {this.renderConsultas()}\r\n          </div>2\r\n        </div>\r\n      </div>\r\n\r\n      );\r\n  }\r\n}\r\n\r\nexport default Datos;","import React, {Component} from 'react';\r\nimport Datos from './Datos.js';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      amount:1\r\n    }\r\n  }\r\n\t\r\n  renderizarDatos() {\r\n    let tamano = [];\r\n    for(let i in 3)\r\n    {\r\n      tamano.push(i);\r\n    }  \r\n    return (\r\n      tamano.map(t => (<Datos/>))\r\n    )\r\n  }\r\n\r\n  onChange(){\r\n    this.setState({\r\n      amount:this.linkInput.value\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n  let tamano = [];\r\n    for(let i = 0; i<this.state.amount;i++)\r\n    {\r\n      tamano.push(i);\r\n    }\t\r\n    return (\r\n      <div>\r\n        <h1> Visualizacion Datos Datos.gov.co</h1>\r\n        <label for = \"numFuentes\"> Indique cuantas fuentes quiere consultar:  </label>\r\n      <input id=\"numFuentes\" type=\"text\" ref ={linkInput => this.linkInput = linkInput} onInput = {this.onChange.bind(this)}></input>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      \r\n      {this.state.amount >=1 && \r\n        <div className=\"container\">\r\n          <div className = \"row\">\r\n          </div>\r\n          <table className =\"table\">\r\n            <thead>\r\n              <tr>  \r\n                {tamano.map(t=>(<th>Ingrese el link de la informaci√≥n que desea consultar</th>))}\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr>  \r\n                {tamano.map(t=>(<td><Datos/></td>))}\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}